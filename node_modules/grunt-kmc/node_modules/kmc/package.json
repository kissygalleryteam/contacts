{
  "name": "kmc",
  "version": "1.0.19",
  "description": "KISSY Module Compiler",
  "author": {
    "name": "daxingplay",
    "email": "daxingplay@gmail.com"
  },
  "homepage": "",
  "keywords": [
    "kissy",
    "build",
    "module",
    "compiler"
  ],
  "bugs": {
    "url": "https://github.com/daxingplay/ModuleCompiler/issues"
  },
  "contributors": [],
  "engines": {
    "node": ">=0.8.0"
  },
  "directories": {
    "lib": "./lib/"
  },
  "main": "./index.js",
  "dependencies": {
    "iconv-lite": ">=0.1.0",
    "colors": ">=0.6.0-1",
    "lodash": "",
    "uglify-js": ""
  },
  "devDependencies": {
    "mocha": "~1.4.1",
    "should": "~0.6.3"
  },
  "scripts": {
    "test": "mocha"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/daxingplay/ModuleCompiler/blob/master/LICENSE.md"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/daxingplay/ModuleCompiler.git"
  },
  "readme": "# ModuleCompiler\n\n[![Build Status](https://secure.travis-ci.org/daxingplay/ModuleCompiler.png)](http://travis-ci.org/daxingplay/ModuleCompiler)\n\n[![NPM version](https://badge.fury.io/js/kmc.png)](http://badge.fury.io/js/kmc)\n\n## 简介\n\nKISSY Module Compiler（kmc）是一个基于NodeJS的KISSY模块打包工具，目前适用于KISSY 1.2+的代码打包\n\n如果您有任何问题，请邮件或者来往（daxingplay）上联系我。\n\n## 特点\n\n- 支持GruntJS，参见[grunt-kmc](https://github.com/daxingplay/grunt-kmc).\n- 基于NodeJS，相比于KISSY自带的Java工具，打包快速\n- 参照浏览器端的KISSY的config进行配置，无需额外知识，只需要改一下包路径即能快速打包\n- 支持混合编码打包，不同的包可以使用不同的编码\n- 支持GBK输出\n- 支持KISSY 1.3的自动combo功能，可以生成依赖关系文件\n- 提供底层依赖分析接口，方便集成到其他工具当中\n- 支持map功能，可以使用正则自由替换输出的模块名\n\n## 版本说明\n\n- 0.0.7版本适用于KISSY 1.2、1.3的打包，目前已经在淘宝多个业务广泛使用，单纯打包没有任何问题，但是不具备依赖分析生成功能，此版本已经不再维护，推荐使用新版本。\n- 1.0.0版本开始支持KISSY 1.3的自动combo功能，推荐使用\n\n## 使用\n\n### 安装\n    npm install kmc\n\nor\n\n    git clone git://github.com/daxingplay/ModuleCompiler.git\n\n**注意**: 新版本的KISSY Module Compiler的npm包已经更名为kmc，如果使用老版本（此版已经不再维护），请`npm install module-compiler`\n\n### 编写你的打包脚本\n\n```js\nvar kmc = require('kmc');\n\n// 这里和KISSY.config一样，先配置包\nkmc.config({\n    packages: [{\n        'name': 'sh',\n        'path': '这里建议写绝对路径，即sh这个包所在的目录',\n        'charset': 'gbk'\n    }]\n});\n\n// 将xxx.js打包为xxx.combine.js，输出编码为GBK\nkmc.build('xxx.js', 'xxx.combine.js', 'gbk');\n\n// 用node执行你这个打包脚本就ok啦～\n```\n\n### 高级使用指南\n\n```js\nvar kmc = require('kmc');\n\nkmc.config({\n    // 和KISSY一样，可以配置多个包\n    packages: [{\n        'name': 'app1',\n        'path': 'app1这个包所在目录的绝对路径',\n        // 这里是指app1这个包中的文件的编码，同一个包内的编码请保持一致\n        'charset': 'gbk'\n    }, {\n        'name': 'app2',\n        'path': 'app2这个包所在目录的绝对路径',\n        // 这里是指app2这个包源码的编码\n        'charset': 'utf-8'\n    }],\n    // 可以设置哪些模块不打包进来。注意，这里exclude的是具体的模块名，支持正则\n    exclude: ['base', 'event'],\n    // 如果是对一个目录下的所有文件进行打包，可以设置哪些文件不打包进来，支持正则。注意和上面的exclude的配置的区别。\n    ignoreFiles: ['.combo.js', '-min.js'],\n    // 输出的文件名后缀，不带.js，比如打包后你想输出为xxx.combine.js，那么这里就配置为：.combine\n    suffix: '',\n    // 类似于KISSY的map方法，可以自己定义把模块名中的路径进行替换\n    map: [\n        // 这样配置的话，那么，如果原先输出的app1的模块名中含有app1/2.0/字样的话，就会被替换成app1/19891014/\n        ['app1/2.0/', 'app1/19891014/']\n    ],\n    // 这里设置的是最后打包出来的文件的编码，默认UTF-8，这里的设置相当于是全局设置，下面build中的设置是针对单一打包实例的\n    charset: 'gbk'\n});\n\n/**\n * 打包一个文件/目录\n * @param inputPath {String} 源文件/目录的绝对路径.\n * @param outputPath {String} 打包出来的文件/目录的路径.\n * @param outputCharset {String} 输出编码，这里的设置会覆盖config.charset中的设置，默认UTF-8\n * @return {Object} 打包出来的文件信息\n */\nkmc.build('xxx.js', 'xxx.combine.js', 'gbk');\n```\n\n更详细的文档，请参见[wiki](https://github.com/daxingplay/ModuleCompiler/wiki)。\n\n### API汇总\n\n* kmc.config(cfg)：配置包，返回当前所有配置信息。如果不带参数，直接返回当前所有配置信息。\n* kmc.analyze(inputPath)：只分析该文件依赖，不打包。\n* kmc.build(inputPath, outputPath, outputCharset, depFilePath, traverse)：打包函数，具体见wiki\n* kmc.combo(inputPath, depFilePath, depFileCharset, fixModuleName): 不打包，只生成KISSY 1.3的自动combo依赖文件，fixModuleName默认为false\n* kmc.clean(): 可以清空config中的设置。因为ModuleCompiler是单例运行，所以如果出现一些特别情况，可以在config前执行clean方法清空之前的配置。\n\n## CHANGELOG\n\n[版本更新记录](https://github.com/daxingplay/ModuleCompiler/blob/master/HISTORY.md)\n\n## License\n遵守 \"MIT\"：https://github.com/daxingplay/ModuleCompiler/blob/master/LICENSE.md 协议",
  "readmeFilename": "README.md",
  "_id": "kmc@1.0.19",
  "dist": {
    "shasum": "0a134f8c1b5f89b4666549370c983e29e7da49b5"
  },
  "_from": "kmc@>=1.0.17"
}
